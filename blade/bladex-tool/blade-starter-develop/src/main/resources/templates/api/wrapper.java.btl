/**
 * BladeX Commercial License Agreement
 * Copyright (c) 2018-2099, https://bladex.cn. All rights reserved.
 * <p>
 * Use of this software is governed by the Commercial License Agreement
 * obtained after purchasing a license from BladeX.
 * <p>
 * 1. This software is for development use only under a valid license
 * from BladeX.
 * <p>
 * 2. Redistribution of this software's source code to any third party
 * without a commercial license is strictly prohibited.
 * <p>
 * 3. Licensees may copyright their own code but cannot use segments
 * from this software for such purposes. Copyright of this software
 * remains with BladeX.
 * <p>
 * Using this software signifies agreement to this License, and the software
 * must not be used for illegal purposes.
 * <p>
 * THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY. The author is
 * not liable for any claims arising from secondary or illegal development.
 * <p>
 * Author: Chill Zhuang (bladejava@qq.com)
 */
package ${strutil.replace(package.Entity,"pojo.entity","wrapper")};

import org.springblade.core.mp.support.BaseEntityWrapper;
import org.springblade.core.tool.utils.BeanUtil;
import ${packageName!}.pojo.entity.${modelClass!}Entity;
import ${packageName!}.pojo.vo.${modelClass!}VO;
import java.util.Objects;
#if(templateType=="tree"){
import org.springblade.core.tool.node.ForestNodeMerger;
import java.util.List;
import java.util.stream.Collectors;
#}

/**
 * ${codeName!} 包装类,返回视图层所需的字段
 *
 * @author ${author!}
 * @since ${date!}
 */
public class ${modelClass!}Wrapper extends BaseEntityWrapper<${modelClass!}Entity, ${modelClass!}VO>  {

	public static ${modelClass!}Wrapper build() {
		return new ${modelClass!}Wrapper();
 	}

	@Override
	public ${modelClass!}VO entityVO(${modelClass!}Entity ${modelCode!}) {
		${modelClass!}VO ${modelCode!}VO = Objects.requireNonNull(BeanUtil.copyProperties(${modelCode!}, ${modelClass!}VO.class));

		//User createUser = UserCache.getUser(${modelCode!}.getCreateUser());
		//User updateUser = UserCache.getUser(${modelCode!}.getUpdateUser());
		//${modelCode!}VO.setCreateUserName(createUser.getName());
		//${modelCode!}VO.setUpdateUserName(updateUser.getName());

		return ${modelCode!}VO;
	}

#if(templateType=="tree"){
	public List<${modelClass!}VO> treeNodeVO(List<${modelClass!}Entity> list) {
		List<${modelClass!}VO> collect = list.stream().map(${modelCode!} -> BeanUtil.copyProperties(${modelCode!}, ${modelClass!}VO.class)).collect(Collectors.toList());
		return ForestNodeMerger.merge(collect);
	}
#}

}

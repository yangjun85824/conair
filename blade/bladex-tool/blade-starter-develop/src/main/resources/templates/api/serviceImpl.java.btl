/**
 * BladeX Commercial License Agreement
 * Copyright (c) 2018-2099, https://bladex.cn. All rights reserved.
 * <p>
 * Use of this software is governed by the Commercial License Agreement
 * obtained after purchasing a license from BladeX.
 * <p>
 * 1. This software is for development use only under a valid license
 * from BladeX.
 * <p>
 * 2. Redistribution of this software's source code to any third party
 * without a commercial license is strictly prohibited.
 * <p>
 * 3. Licensees may copyright their own code but cannot use segments
 * from this software for such purposes. Copyright of this software
 * remains with BladeX.
 * <p>
 * Using this software signifies agreement to this License, and the software
 * must not be used for illegal purposes.
 * <p>
 * THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY. The author is
 * not liable for any claims arising from secondary or illegal development.
 * <p>
 * Author: Chill Zhuang (bladejava@qq.com)
 */
package ${package.ServiceImpl!};

import ${packageName!}.pojo.entity.${modelClass!}Entity;
import ${packageName!}.pojo.vo.${modelClass!}VO;
import ${packageName!}.excel.${modelClass!}Excel;
import ${packageName!}.mapper.${model.modelClass!}Mapper;
import ${packageName!}.service.I${model.modelClass!}Service;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
#if(templateType=="tree"){
import org.springblade.core.tool.node.ForestNodeMerger;
#}
#if(hasSuperEntity){
import ${superServiceImplClassPackage!};
#}else{
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
#}
import java.util.List;

/**
 * ${codeName!} 服务实现类
 *
 * @author ${author!}
 * @since ${date!}
 */
@Service
#if(hasSuperEntity){
public class ${modelClass!}ServiceImpl extends ${superServiceImplClass!}<${modelClass!}Mapper, ${modelClass!}Entity> implements I${model.modelClass!}Service {
#}else{
public class ${modelClass!}ServiceImpl extends ServiceImpl<${modelClass!}Mapper, ${modelClass!}Entity> implements I${model.modelClass!}Service {
#}

	@Override
	public IPage<${modelClass!}VO> select${modelClass!}Page(IPage<${modelClass!}VO> page, ${modelClass!}VO ${modelCode!}) {
		return page.setRecords(baseMapper.select${modelClass!}Page(page, ${modelCode!}));
	}

#if(templateType=="tree"){
	@Override
	public List<${modelClass!}VO> tree(String tenantId) {
		return ForestNodeMerger.merge(baseMapper.tree(tenantId));
	}
#}

	@Override
	public List<${modelClass!}Excel> export${modelClass!}(Wrapper<${modelClass!}Entity> queryWrapper) {
		List<${modelClass!}Excel> ${modelCode!}List = baseMapper.export${modelClass!}(queryWrapper);
		//${modelCode!}List.forEach(${modelCode!} -> {
		//	${modelCode!}.setTypeName(DictCache.getValue(DictEnum.YES_NO, ${modelClass!}.getType()));
		//});
		return ${modelCode!}List;
	}

}

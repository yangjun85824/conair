/**
 * BladeX Commercial License Agreement
 * Copyright (c) 2018-2099, https://bladex.cn. All rights reserved.
 * <p>
 * Use of this software is governed by the Commercial License Agreement
 * obtained after purchasing a license from BladeX.
 * <p>
 * 1. This software is for development use only under a valid license
 * from BladeX.
 * <p>
 * 2. Redistribution of this software's source code to any third party
 * without a commercial license is strictly prohibited.
 * <p>
 * 3. Licensees may copyright their own code but cannot use segments
 * from this software for such purposes. Copyright of this software
 * remains with BladeX.
 * <p>
 * Using this software signifies agreement to this License, and the software
 * must not be used for illegal purposes.
 * <p>
 * THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY. The author is
 * not liable for any claims arising from secondary or illegal development.
 * <p>
 * Author: Chill Zhuang (bladejava@qq.com)
 */
package ${package.Controller};

import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import lombok.AllArgsConstructor;
import jakarta.validation.Valid;

import org.springblade.core.secure.BladeUser;
import org.springblade.core.secure.annotation.PreAuth;
import org.springblade.core.mp.support.Condition;
import org.springblade.core.mp.support.Query;
import org.springblade.core.tool.api.R;
import org.springblade.core.tool.utils.Func;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import ${packageName!}.pojo.entity.${modelClass!}Entity;
import ${packageName!}.pojo.vo.${modelClass!}VO;
import ${packageName!}.excel.${modelClass!}Excel;
#if(hasWrapper) {
import ${packageName!}.wrapper.${modelClass!}Wrapper;
#}
import ${packageName!}.service.I${modelClass!}Service;
#if(isNotEmpty(superControllerClassPackage)){
import ${superControllerClassPackage!};
#}
#if(templateType=="tree"&&!hasWrapper){
import ${packageName!}.wrapper.${modelClass!}Wrapper;
#}
import org.springblade.core.tool.utils.DateUtil;
import org.springblade.core.excel.util.ExcelUtil;
import org.springblade.core.tool.constant.BladeConstant;
import org.springblade.core.tool.constant.RoleConstant;
import java.util.Map;
import java.util.List;
import jakarta.servlet.http.HttpServletResponse;

/**
 * ${codeName!} 控制器
 *
 * @author ${author!}
 * @since ${date!}
 */
@RestController
@AllArgsConstructor
#if(hasServiceName) {
@RequestMapping("${serviceName!}/${modelCode!}")
#}else{
@RequestMapping("/${modelCode!}")
#}
@Tag(name = "${codeName!}", description = "${codeName!}接口")
#if(isNotEmpty(superControllerClass)){
public class ${modelClass!}Controller extends ${superControllerClass!} {
#}
#else{
public class ${modelClass!}Controller {
#}

	private final I${modelClass!}Service ${modelCode!}Service;

#if(hasWrapper){
	/**
	 * ${codeName!} 详情
	 */
	@GetMapping("/detail")
	@ApiOperationSupport(order = 1)
	@Operation(summary = "详情", description  = "传入${modelCode!}")
	public R<${modelClass!}VO> detail(${modelClass!}Entity ${modelCode!}) {
		${modelClass!}Entity detail = ${modelCode!}Service.getOne(Condition.getQueryWrapper(${modelCode!}));
		return R.data(${modelClass!}Wrapper.build().entityVO(detail));
	}
#if(templateType=="tree"){
	/**
	 * ${codeName!} 树列表
	 */
	@GetMapping("/list")
	@ApiOperationSupport(order = 2)
	@Operation(summary = "分页", description  = "传入${modelCode!}")
	public R<List<${modelClass!}VO>> list(@Parameter(hidden = true) @RequestParam Map<String, Object> ${modelCode!}, BladeUser bladeUser) {
		QueryWrapper<${modelClass!}Entity> queryWrapper = Condition.getQueryWrapper(${modelCode!}, ${modelClass!}Entity.class);
		List<${modelClass!}Entity> list = ${modelCode!}Service.list((!bladeUser.getTenantId().equals(BladeConstant.ADMIN_TENANT_ID)) ? queryWrapper.lambda().eq(${modelClass!}Entity::getTenantId, bladeUser.getTenantId()) : queryWrapper);
		return R.data(${modelClass!}Wrapper.build().treeNodeVO(list));
	}
#}else{
	/**
	 * ${codeName!} 分页
	 */
	@GetMapping("/list")
	@ApiOperationSupport(order = 2)
	@Operation(summary = "分页", description  = "传入${modelCode!}")
	public R<IPage<${modelClass!}VO>> list(@Parameter(hidden = true) @RequestParam Map<String, Object> ${modelCode!}, Query query) {
		IPage<${modelClass!}Entity> pages = ${modelCode!}Service.page(Condition.getPage(query), Condition.getQueryWrapper(${modelCode!}, ${modelClass!}Entity.class));
		return R.data(${modelClass!}Wrapper.build().pageVO(pages));
	}
#}
#}else{
	/**
	 * ${codeName!} 详情
	 */
	@GetMapping("/detail")
	@ApiOperationSupport(order = 1)
	@Operation(summary = "详情", description  = "传入${modelCode!}")
	public R<${modelClass!}Entity> detail(${modelClass!}Entity ${modelCode!}) {
		${modelClass!}Entity detail = ${modelCode!}Service.getOne(Condition.getQueryWrapper(${modelCode!}));
		return R.data(detail);
	}
#if(templateType=="tree"){
	/**
	 * ${codeName!} 树列表
	 */
	@GetMapping("/list")
	@ApiOperationSupport(order = 2)
	@Operation(summary = "分页", description  = "传入notice")
	public R<List<${modelClass!}VO>> list(@Parameter(hidden = true) @RequestParam Map<String, Object> ${modelCode!}, BladeUser bladeUser) {
		QueryWrapper<${modelClass!}Entity> queryWrapper = Condition.getQueryWrapper(${modelCode!}, ${modelClass!}Entity.class);
		List<${modelClass!}Entity> list = ${modelCode!}Service.list((!bladeUser.getTenantId().equals(BladeConstant.ADMIN_TENANT_ID)) ? queryWrapper.lambda().eq(${modelClass!}Entity::getTenantId, bladeUser.getTenantId()) : queryWrapper);
		return R.data(${modelClass!}Wrapper.build().treeNodeVO(list));
	}
#}else{
	/**
	 * ${codeName!} 分页
	 */
	@GetMapping("/list")
	@ApiOperationSupport(order = 2)
	@Operation(summary = "分页", description  = "传入${modelCode!}")
	public R<IPage<${modelClass!}Entity>> list(@Parameter(hidden = true) @RequestParam Map<String, Object> ${modelCode!}, Query query) {
		IPage<${modelClass!}Entity> pages = ${modelCode!}Service.page(Condition.getPage(query), Condition.getQueryWrapper(${modelCode!}, ${modelClass!}Entity.class));
		return R.data(pages);
	}
#}
#}

	/**
	 * ${codeName!} 自定义分页
	 */
	@GetMapping("/page")
	@ApiOperationSupport(order = 3)
	@Operation(summary = "分页", description  = "传入${modelCode!}")
	public R<IPage<${modelClass!}VO>> page(${modelClass!}VO ${modelCode!}, Query query) {
		IPage<${modelClass!}VO> pages = ${modelCode!}Service.select${modelClass!}Page(Condition.getPage(query), ${modelCode!});
		return R.data(pages);
	}

	/**
	 * ${codeName!} 新增
	 */
	@PostMapping("/save")
	@ApiOperationSupport(order = 4)
	@Operation(summary = "新增", description  = "传入${modelCode!}")
	public R save(@Valid @RequestBody ${modelClass!}Entity ${modelCode!}) {
		return R.status(${modelCode!}Service.save(${modelCode!}));
	}

	/**
	 * ${codeName!} 修改
	 */
	@PostMapping("/update")
	@ApiOperationSupport(order = 5)
	@Operation(summary = "修改", description  = "传入${modelCode!}")
	public R update(@Valid @RequestBody ${modelClass!}Entity ${modelCode!}) {
		return R.status(${modelCode!}Service.updateById(${modelCode!}));
	}

	/**
	 * ${codeName!} 新增或修改
	 */
	@PostMapping("/submit")
	@ApiOperationSupport(order = 6)
	@Operation(summary = "新增或修改", description  = "传入${modelCode!}")
	public R submit(@Valid @RequestBody ${modelClass!}Entity ${modelCode!}) {
		return R.status(${modelCode!}Service.saveOrUpdate(${modelCode!}));
	}

#if(hasSuperEntity){
	/**
	 * ${codeName!} 删除
	 */
	@PostMapping("/remove")
	@ApiOperationSupport(order = 7)
	@Operation(summary = "逻辑删除", description  = "传入ids")
	public R remove(@Parameter(description = "主键集合", required = true) @RequestParam String ids) {
		return R.status(${modelCode!}Service.deleteLogic(Func.toLongList(ids)));
	}
#}else{
	/**
	 * ${codeName!} 删除
	 */
	@PostMapping("/remove")
	@ApiOperationSupport(order = 7)
	@Operation(summary = "删除", description  = "传入ids")
	public R remove(@Parameter(description = "主键集合", required = true) @RequestParam String ids) {
		return R.status(${modelCode!}Service.removeByIds(Func.toLongList(ids)));
	}
#}

#if(templateType=="tree"){
	/**
	 * ${codeName!} 树形结构
	 */
	@GetMapping("/tree")
	@ApiOperationSupport(order = 8)
	@Operation(summary = "树形结构", description  = "树形结构")
	public R<List<${modelClass!}VO>> tree(String tenantId, BladeUser bladeUser) {
		List<${modelClass!}VO> tree = ${modelCode!}Service.tree(Func.toStrWithEmpty(tenantId, bladeUser.getTenantId()));
		return R.data(tree);
	}
#}

	/**
	 * 导出数据
	 */
	@PreAuth(RoleConstant.HAS_ROLE_ADMIN)
	@GetMapping("/export-${modelCode!}")
	@ApiOperationSupport(order = 9)
	@Operation(summary = "导出数据", description  = "传入${modelCode!}")
	public void export${modelClass!}(@Parameter(hidden = true) @RequestParam Map<String, Object> ${modelCode!}, BladeUser bladeUser, HttpServletResponse response) {
		QueryWrapper<${modelClass!}Entity> queryWrapper = Condition.getQueryWrapper(${modelCode!}, ${modelClass!}Entity.class);
		//if (!AuthUtil.isAdministrator()) {
		//	queryWrapper.lambda().eq(${modelClass!}::getTenantId, bladeUser.getTenantId());
		//}
		queryWrapper.lambda().eq(${modelClass!}Entity::getIsDeleted, BladeConstant.DB_NOT_DELETED);
		List<${modelClass!}Excel> list = ${modelCode!}Service.export${modelClass!}(queryWrapper);
		ExcelUtil.export(response, "${codeName!}数据" + DateUtil.time(), "${codeName!}数据表", list, ${modelClass!}Excel.class);
	}

}
